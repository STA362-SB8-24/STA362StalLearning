{
  "hash": "697bee90dc1ded067f0d86acb45c3fd7",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Chapter 5 and tidymodels\"\nformat: \n  kakashi-revealjs:\n    theme: [custom.scss]\n    slide-number: true\n    chalkboard: true\n---\n\n\n\n\n\n## Setup\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(ISLR)\nlibrary(tidymodels)\nlibrary(gridExtra)\n```\n:::\n\n\n## Cross validation\n### 💡 Big idea\n\n::: nonincremental\n* We have determined that it is sensible to use a _test_ set to calculate metrics like prediction error\n:::\n\n## Cross validation\n### 💡 Big idea\n\n::: nonincremental\n* We have determined that it is sensible to use a _test_ set to calculate metrics like prediction error\n:::\n\n::: question\nWhy?\n:::\n\n\n## Cross validation \n### 💡 Big idea\n\n::: nonincremental\n* We have determined that it is sensible to use a _test_ set to calculate metrics like prediction error\n:::\n\n::: question\nHow could we do this?\n:::\n\n\n\n## Cross validation\n### 💡 Big idea\n\n::: nonincremental\n* We have determined that it is sensible to use a _test_ set to calculate metrics like prediction error\n* What if we don't have a separate data set to test our model on?\n* 🎉 We can use **resampling** methods to **estimate** the test-set prediction error\n:::\n\n\n## Training error versus test error {.small}\n\n::: question\nWhat is the difference? Which is typically larger?\n:::\n\n * The **training error** is calculated by using the same observations used to fit the statistical learning model\n * The **test error** is calculated by using a statistical learning method to predict the response of **new** observations\n * The **training error rate** typically _underestimates_ the true prediction error rate\n\n##\n\n![](img/05/model-complexity.png)\n\n## Estimating prediction error {.small}\n\n * Best case scenario: We have a large data set to test our model on \n * This is not always the case!\n\n. . .\n\n 💡 Let's instead find a way to estimate the test error by holding out a subset of the training observations from the model fitting process, and then applying the statistical learning method to those held out observations\n\n\n\n## Approach #1: Validation set  {.small}\n\n * Randomly divide the available set up samples into two parts: a **training set** and a **validation set**\n * Fit the model on the **training set**, calculate the prediction error on the **validation set**\n\n. . .\n\n::: question\nIf we have a **quantitative predictor** what metric would we use to calculate this test error?\n:::\n\n\n* Often we use Mean Squared Error (MSE)\n\n\n## Approach #1: Validation set {.small}\n\n::: nonincremental\n* Randomly divide the available set up samples into two parts: a **training set** and a **validation set**\n* Fit the model on the **training set**, calculate the prediction error on the **validation set**\n\n:::\n\n::: question\nIf we have a **qualitative predictor** what metric would we use to calculate this test error?\n:::\n\n\n* Often we use misclassification rate\n\n\n\n## Approach #1: Validation set {.small}\n\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](05-cv-tidymodels_files/figure-revealjs/unnamed-chunk-4-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\n. . .\n\n$$\\Large\\color{orange}{MSE_{\\texttt{test-split}} = \\textrm{Ave}_{i\\in\\texttt{test-split}}[y_i-\\hat{f}(x_i)]^2}$$\n\n. . .\n\n$$\\Large\\color{orange}{Err_{\\texttt{test-split}} = \\textrm{Ave}_{i\\in\\texttt{test-split}}I[y_i\\neq \\mathcal{\\hat{C}}(x_i)]}$$\n\n\n\n## Approach #1: Validation set {.small}\n\nAuto example:  \n\n::: nonincremental\n* We have 392 observations. \n* Trying to predict `mpg` from `horsepower`. \n* We can split the data in half and use 196 to fit the model and 196 to test \n:::\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](05-cv-tidymodels_files/figure-revealjs/unnamed-chunk-5-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\n\n\n## Approach #1: Validation set {.small}\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](05-cv-tidymodels_files/figure-revealjs/unnamed-chunk-6-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\n\n$\\color{orange}{MSE_{\\texttt{test-split}}}$\n\n. . .\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](05-cv-tidymodels_files/figure-revealjs/unnamed-chunk-7-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\n\n\n$\\color{orange}{MSE_{\\texttt{test-split}}}$\n\n. . .\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](05-cv-tidymodels_files/figure-revealjs/unnamed-chunk-8-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\n\n$\\color{orange}{MSE_{\\texttt{test-split}}}$\n\n\n. . .\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](05-cv-tidymodels_files/figure-revealjs/unnamed-chunk-9-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\n\n$\\color{orange}{MSE_{\\texttt{test-split}}}$\n\n\n\n## Approach #1: Validation set {.small}\n\nAuto example: \n\n::: nonincremental\n\n* We have 392 observations. \n* Trying to predict `mpg` from `horsepower`. \n* We can split the data in half and use 196 to fit the model and 196 to test - **what if we did this many times?**\n\n:::\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](05-cv-tidymodels_files/figure-revealjs/unnamed-chunk-10-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\n\n\n## Approach #1: Validation set (Drawbacks) {.small}\n\n* the validation estimate of the test error can be highly variable, depending on which observations are included in the training set and which observations are included in the validation set\n* In the validation approach, only a subset of the observations (those that are included in the training set rather than in the validation set) are used to fit the model\n* Therefore, the validation set error may tend to **overestimate** the test error for the model fit on the entire data set\n\n\n\n## Approach #2: K-fold cross validation {.small}\n\n💡 The idea is to do the following:\n\n*  Randomly divide the data into $K$ equal-sized parts\n*  Leave out part $k$, fit the model to the other $K - 1$ parts (combined)\n*  Obtain predictions for the left-out $k$th part\n*  Do this for each part $k = 1, 2,\\dots K$, and then combine the result\n\n\n\n## K-fold cross validation {.smaller}\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](05-cv-tidymodels_files/figure-revealjs/unnamed-chunk-11-1.png){fig-align='center' width=80%}\n:::\n:::\n\n$\\color{orange}{MSE_{\\texttt{test-split-1}}}$\n\n\n. . .\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](05-cv-tidymodels_files/figure-revealjs/unnamed-chunk-12-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\n$\\color{orange}{MSE_{\\texttt{test-split-2}}}$\n\n. . .\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](05-cv-tidymodels_files/figure-revealjs/unnamed-chunk-13-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\n$\\color{orange}{MSE_{\\texttt{test-split-3}}}$\n\n\n. . .\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](05-cv-tidymodels_files/figure-revealjs/unnamed-chunk-14-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\n$\\color{orange}{MSE_{\\texttt{test-split-4}}}$\n\n\n**Take the mean of the $k$ MSE values**\n\n## {{< fa laptop >}} `Application Exercise` \n\nCreate a new R project, then a new `quarto` file with `cv` in its name in that project. Answer the questions in that file. \n\nIf we use 10 folds:\n\n::: nonincremental\n1. What percentage of the training data is used in each analysis for each fold?\n2. What percentage of the training data is used in the assessment for each fold?\n:::\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer_fcb9bdac\" data-update-every=\"1\" tabindex=\"0\" style=\"right:0;bottom:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">02</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n\n\n## Estimating prediction error (quantitative outcome) {.smaller}\n\n* Split the data into K parts, where $C_1, C_2, \\dots, C_k$ indicate the indices of observations in part $k$\n* $CV_{(K)} = \\sum_{k=1}^K\\frac{n_k}{n}MSE_k$\n* $MSE_k = \\sum_{i \\in C_k} (y_i - \\hat{y}_i)^2/n_k$\n* $n_k$ is the number of observations in group $k$\n* $\\hat{y}_i$ is the fit for observation $i$ obtained from the data with the part $k$ removed\n* If we set $K = n$, we'd have $n-fold$ cross validation which is the same as **leave-one-out cross validation** (LOOCV)\n\n## Estimating prediction error (quantitative outcome) {.smaller}\n\n::: nonincremental\n* Split the data into K parts, where $C_1, C_2, \\dots, C_k$ indicate the indices of observations in part $k$\n* $CV_{(K)} = \\sum_{k=1}^K\\frac{n_k}{n}MSE_k$\n* $MSE_k = \\sum_{i \\in C_k} (y_i - \\hat{y}_i)^2/n_k$\n* $n_k$ is the number of observations in group $k$\n* $\\hat{y}_i$ is the fit for observation $i$ obtained from the data with the part $k$ removed\n* If we set $K = n$, we'd have $n-fold$ cross validation which is the same as **leave-one-out cross validation** (LOOCV)\n:::\n \n## Leave-one-out cross validation {.small}\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](05-cv-tidymodels_files/figure-revealjs/unnamed-chunk-16-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\n. . .\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](05-cv-tidymodels_files/figure-revealjs/unnamed-chunk-17-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\n. . .\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](05-cv-tidymodels_files/figure-revealjs/unnamed-chunk-18-1.png){fig-align='center' width=80%}\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](05-cv-tidymodels_files/figure-revealjs/unnamed-chunk-19-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\n$$\\dots$$\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](05-cv-tidymodels_files/figure-revealjs/unnamed-chunk-20-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\n\n\n## Special Case!\n\n* With _linear_ regression, you can actually calculate the LOOCV error without having to iterate!\n* $CV_{(n)} = \\frac{1}{n}\\sum_{i=1}^n\\left(\\frac{y_i-\\hat{y}_i}{1-h_i}\\right)^2$\n* $\\hat{y}_i$ is the $i$th fitted value from the linear model\n* $h_i$ is the diagonal of the \"hat\" matrix (remember that! 🎓)\n\n\n## Picking $K$ {.small}\n\n* $K$ can vary from 2 (splitting the data in half each time) to $n$ (LOOCV)\n* LOOCV is sometimes useful but usually the estimates from each fold are very correlated, so their average can have a **high variance**\n* A better choice tends to be $K=5$ or $K=10$\n\n\n\n## Bias variance trade-off\n\n* Since each training set is only $(K - 1)/K$ as big as the original training set, the estimates of prediction error will typically be **biased** upward\n* This bias is minimized when $K = n$ (LOOCV), but this estimate has a **high variance**\n* $K =5$ or $K=10$ provides a nice compromise for the bias-variance trade-off\n\n\n## Approach #2: K-fold Cross Validation {.small}\n\nAuto example: \n\n::: nonincremental\n\n* We have 392 observations. \n* Trying to predict `mpg` from `horsepower`\n:::\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](05-cv-tidymodels_files/figure-revealjs/fig1-1.png){fig-align='center' width=80%}\n:::\n:::\n\n\n\n\n## Estimating prediction error (qualitative outcome) {.small}\n\n* The premise is the same as cross valiation for quantitative outcomes\n* Split the data into K parts, where $C_1, C_2, \\dots, C_k$ indicate the indices of observations in part $k$\n* $CV_K = \\sum_{k=1}^K\\frac{n_k}{n}Err_k$\n* $Err_k = \\sum_{i\\in C_k}I(y_i\\neq\\hat{y}_i)/n_k$ (misclassification rate)\n* $n_k$ is the number of observations in group $k$\n* $\\hat{y}_i$ is the fit for observation $i$ obtained from the data with the part $k$ removed\n\n\n## Estimating prediction error (qualitative outcome) {.small}\n\n::: nonincremental\n* The premise is the same as cross valiation for quantitative outcomes\n* Split the data into K parts, where $C_1, C_2, \\dots, C_k$ indicate the indices of observations in part $k$\n* $CV_K = \\sum_{k=1}^K\\frac{n_k}{n}Err_k$\n* $Err_k = \\sum_{i\\in C_k}I(y_i\\neq\\hat{y}_i)/n_k$ (misclassification rate)\n* $n_k$ is the number of observations in group $k$\n* $\\hat{y}_i$ is the fit for observation $i$ obtained from the data with the part $k$ removed\n:::\n\n\n\n\n\n\n\n\n# tidymodels\n\n## {{< fa laptop >}} `Application Exercise` {.small}\n\n\n::: nonincremental\n1. Create a new `quarto` file in your project and add `tidymodels` in the name. \n\n2. Load the packages by running the top chunk of R code\n:::\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(tidymodels)\nlibrary(broom)\nlibrary(ISLR)\nlibrary(countdown)\n```\n:::\n\n\n## tidymodels {.small}\n\n:::: columns\n\n::: column\n![](img/02/tidymodels.png)\n:::\n\n::: column\n\n[tidymodels.org](https://www.tidymodels.org/)\n\n\n- tidymodels is an opinionated collection of R packages designed for modeling and statistical analysis.\n- All packages share an underlying philosophy and a common grammar.\n:::\n\n::::\n\n\n## Step 1: Specify the model\n\n* Pick the **model**\n* Set the **engine**\n\n\n\n## Specify the model\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlinear_reg() |>\n  set_engine(\"lm\")\n```\n:::\n\n\n\n\n## Specify the model\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlinear_reg() |>\n  set_engine(\"glmnet\")\n```\n:::\n\n\n\n\n## Specify the model\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlinear_reg() |>\n  set_engine(\"spark\")\n```\n:::\n\n\n\n\n## Specify the model\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndecision_tree() |>\n  set_engine(\"rpart\")\n```\n:::\n\n\n\n## Specify the model\n\n::: nonincremental\n\n* All available models:\n\n[tidymodels.org](https://www.tidymodels.org/find/parsnip/)\n\n:::\n\n\n\n\n## {{< fa laptop >}} `Application Exercise` \n\n::: nonincremental\n\n1. Write a pipe that creates a model that uses `lm()` to fit a linear regression using tidymodels. Save it as `lm_spec` and look at the object. What does it return?\n\n:::\n\n_Hint: you'll need  https://www.tidymodels.org_\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer_2681a855\" data-update-every=\"1\" tabindex=\"0\" style=\"right:0;bottom:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">05</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n\n## Answer\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlm_spec <- \n  linear_reg() |> # Pick linear regression\n  set_engine(engine = \"lm\") # set engine\nlm_spec\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nLinear Regression Model Specification (regression)\n\nComputational engine: lm \n```\n\n\n:::\n:::\n\n\n\n\n## Fit the data\n\n::: nonincremental\n\n- You can train your model using the `fit()` function\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nfit(lm_spec,\n    mpg ~ horsepower,\n    data = Auto)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nparsnip model object\n\n\nCall:\nstats::lm(formula = mpg ~ horsepower, data = data)\n\nCoefficients:\n(Intercept)   horsepower  \n    39.9359      -0.1578  \n```\n\n\n:::\n:::\n\n\n:::\n\n## `<svg aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 640 512\" style=\"height:1em;width:1.25em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:currentColor;overflow:visible;position:relative;\"><path d=\"M128 32C92.7 32 64 60.7 64 96V352h64V96H512V352h64V96c0-35.3-28.7-64-64-64H128zM19.2 384C8.6 384 0 392.6 0 403.2C0 445.6 34.4 480 76.8 480H563.2c42.4 0 76.8-34.4 76.8-76.8c0-10.6-8.6-19.2-19.2-19.2H19.2z\"/></svg>`{=html} `Application Exercise` {.small}\n\n::: nonincremental\n\n1. Fit the model:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(ISLR)\nlm_fit <- fit(lm_spec,\n              mpg ~ horsepower,\n              data = Auto)\nlm_fit\n```\n:::\n\n\n\nDoes this give the same results as\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlm(mpg ~ horsepower, data = Auto)\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer_f521a00a\" data-update-every=\"1\" tabindex=\"0\" style=\"right:0;bottom:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">03</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n\n:::\n\n## Answer {.small}\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlm_fit <- fit(lm_spec,\n              mpg ~ horsepower,\n              data = Auto)\nlm_fit\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nparsnip model object\n\n\nCall:\nstats::lm(formula = mpg ~ horsepower, data = data)\n\nCoefficients:\n(Intercept)   horsepower  \n    39.9359      -0.1578  \n```\n\n\n:::\n\n```{.r .cell-code}\nlm(mpg ~ horsepower, data = Auto)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nlm(formula = mpg ~ horsepower, data = Auto)\n\nCoefficients:\n(Intercept)   horsepower  \n    39.9359      -0.1578  \n```\n\n\n:::\n:::\n\n\n\n## Get predictions\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlm_fit |>\n  predict(new_data = Auto)\n```\n:::\n\n\n\n* Uses the `predict()` function\n* ‼️ `new_data` has an underscore\n* 😄 This automagically creates a data frame\n\n\n## Get predictions {.small}\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlm_fit |>\n  predict(new_data = Auto) |>\n  bind_cols(Auto)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 392 × 10\n   .pred   mpg cylinders displacement horsepower weight acceleration  year origin name    \n * <dbl> <dbl>     <dbl>        <dbl>      <dbl>  <dbl>        <dbl> <dbl>  <dbl> <fct>   \n 1 19.4     18         8          307        130   3504         12      70      1 chevrol…\n 2 13.9     15         8          350        165   3693         11.5    70      1 buick s…\n 3 16.3     18         8          318        150   3436         11      70      1 plymout…\n 4 16.3     16         8          304        150   3433         12      70      1 amc reb…\n 5 17.8     17         8          302        140   3449         10.5    70      1 ford to…\n 6  8.68    15         8          429        198   4341         10      70      1 ford ga…\n 7  5.21    14         8          454        220   4354          9      70      1 chevrol…\n 8  6.00    14         8          440        215   4312          8.5    70      1 plymout…\n 9  4.42    14         8          455        225   4425         10      70      1 pontiac…\n10  9.95    15         8          390        190   3850          8.5    70      1 amc amb…\n# ℹ 382 more rows\n```\n\n\n:::\n:::\n\n\n. . .\n\n::: question\nWhat does `bind_cols` do?\n:::\n\n\n## Get predictions {.small}\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlm_fit |>\n  predict(new_data = Auto) |>\n  bind_cols(Auto)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 392 × 10\n   .pred   mpg cylinders displacement horsepower weight acceleration  year origin name    \n * <dbl> <dbl>     <dbl>        <dbl>      <dbl>  <dbl>        <dbl> <dbl>  <dbl> <fct>   \n 1 19.4     18         8          307        130   3504         12      70      1 chevrol…\n 2 13.9     15         8          350        165   3693         11.5    70      1 buick s…\n 3 16.3     18         8          318        150   3436         11      70      1 plymout…\n 4 16.3     16         8          304        150   3433         12      70      1 amc reb…\n 5 17.8     17         8          302        140   3449         10.5    70      1 ford to…\n 6  8.68    15         8          429        198   4341         10      70      1 ford ga…\n 7  5.21    14         8          454        220   4354          9      70      1 chevrol…\n 8  6.00    14         8          440        215   4312          8.5    70      1 plymout…\n 9  4.42    14         8          455        225   4425         10      70      1 pontiac…\n10  9.95    15         8          390        190   3850          8.5    70      1 amc amb…\n# ℹ 382 more rows\n```\n\n\n:::\n:::\n\n\n::: question\nWhich column has the predicted values?\n:::\n\n## `<svg aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 640 512\" style=\"height:1em;width:1.25em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:currentColor;overflow:visible;position:relative;\"><path d=\"M128 32C92.7 32 64 60.7 64 96V352h64V96H512V352h64V96c0-35.3-28.7-64-64-64H128zM19.2 384C8.6 384 0 392.6 0 403.2C0 445.6 34.4 480 76.8 480H563.2c42.4 0 76.8-34.4 76.8-76.8c0-10.6-8.6-19.2-19.2-19.2H19.2z\"/></svg>`{=html} `Application Exercise` \n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer_ee4971c4\" data-update-every=\"1\" tabindex=\"0\" style=\"right:0;bottom:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">03</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n\n::: nonincremental\n1. Edit the code below to add the original data to the predicted data.\n:::\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nmpg_pred <- lm_fit |> \n  predict(new_data = Auto) |> \n  ---\n```\n:::\n\n\n\n\n## Get predictions {.small}\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nmpg_pred <- lm_fit |>\n  predict(new_data = Auto) |>\n  bind_cols(Auto)\n\nmpg_pred\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 392 × 10\n   .pred   mpg cylinders displacement horsepower weight acceleration  year origin name    \n * <dbl> <dbl>     <dbl>        <dbl>      <dbl>  <dbl>        <dbl> <dbl>  <dbl> <fct>   \n 1 19.4     18         8          307        130   3504         12      70      1 chevrol…\n 2 13.9     15         8          350        165   3693         11.5    70      1 buick s…\n 3 16.3     18         8          318        150   3436         11      70      1 plymout…\n 4 16.3     16         8          304        150   3433         12      70      1 amc reb…\n 5 17.8     17         8          302        140   3449         10.5    70      1 ford to…\n 6  8.68    15         8          429        198   4341         10      70      1 ford ga…\n 7  5.21    14         8          454        220   4354          9      70      1 chevrol…\n 8  6.00    14         8          440        215   4312          8.5    70      1 plymout…\n 9  4.42    14         8          455        225   4425         10      70      1 pontiac…\n10  9.95    15         8          390        190   3850          8.5    70      1 amc amb…\n# ℹ 382 more rows\n```\n\n\n:::\n:::\n\n\n\n## Calculate the error\n\n::: nonincremental\n* Root mean square error\n:::\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nmpg_pred |>\n  rmse(truth = mpg, estimate = .pred)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 3\n  .metric .estimator .estimate\n  <chr>   <chr>          <dbl>\n1 rmse    standard        4.89\n```\n\n\n:::\n:::\n\n\n. . .\n\n::: question\nWhat is this estimate? (training error? testing error?)\n:::\n\n\n\n## Validation set approach\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nAuto_split <- initial_split(Auto, prop = 0.5)\nAuto_split\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n<Training/Testing/Total>\n<196/196/392>\n```\n\n\n:::\n:::\n\n\n. . .\n\n::: question\nHow many observations are in the training set?\n:::\n\n## Validation set approach\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nAuto_split <- initial_split(Auto, prop = 0.5)\nAuto_split\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n<Training/Testing/Total>\n<196/196/392>\n```\n\n\n:::\n:::\n\n\n\n::: question\nHow many observations are in the test set?\n:::\n\n## Validation set approach\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nAuto_split <- initial_split(Auto, prop = 0.5)\nAuto_split\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n<Training/Testing/Total>\n<196/196/392>\n```\n\n\n:::\n:::\n\n\n\n::: question\nHow many observations are there in total?\n:::\n\n\n## Validation set approach\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nAuto_split <- initial_split(Auto, prop = 0.5)\nAuto_split\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n<Training/Testing/Total>\n<196/196/392>\n```\n\n\n:::\n:::\n\n\n::: nonincremental\n* Extract the training and testing data\n:::\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntraining(Auto_split)\ntesting(Auto_split)\n```\n:::\n\n\n\n\n## Validation set approach {.small}\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nAuto_train <- training(Auto_split)\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nAuto_train\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 196 × 9\n     mpg cylinders displacement horsepower weight acceleration  year origin name          \n   <dbl>     <dbl>        <dbl>      <dbl>  <dbl>        <dbl> <dbl>  <dbl> <fct>         \n 1  37.7         4           89         62   2050         17.3    81      3 toyota tercel \n 2  27           4           97         60   1834         19      71      2 volkswagen mo…\n 3  22           6          232        112   2835         14.7    82      1 ford granada l\n 4  16           6          250        100   3781         17      74      1 chevrolet che…\n 5  25           4           90         71   2223         16.5    75      2 volkswagen da…\n 6  18           6          232        100   2945         16      73      1 amc hornet    \n 7  38.1         4           89         60   1968         18.8    80      3 toyota coroll…\n 8  23           4           97         54   2254         23.5    72      2 volkswagen ty…\n 9  15           8          302        130   4295         14.9    77      1 mercury couga…\n10  34           4          108         70   2245         16.9    82      3 toyota corolla\n# ℹ 186 more rows\n```\n\n\n:::\n:::\n\n\n\n## `<svg aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 640 512\" style=\"height:1em;width:1.25em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:currentColor;overflow:visible;position:relative;\"><path d=\"M128 32C92.7 32 64 60.7 64 96V352h64V96H512V352h64V96c0-35.3-28.7-64-64-64H128zM19.2 384C8.6 384 0 392.6 0 403.2C0 445.6 34.4 480 76.8 480H563.2c42.4 0 76.8-34.4 76.8-76.8c0-10.6-8.6-19.2-19.2-19.2H19.2z\"/></svg>`{=html} `Application Exercise`  {.small}\n\n::: nonincremental\n1. Copy the code below, fill in the blanks to fit a model on the **training** data then calculate the **test** RMSE.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nset.seed(100)\nAuto_split  <- ________\nAuto_train  <- ________\nAuto_test   <- ________\nlm_fit      <- fit(lm_spec, \n                   mpg ~ horsepower, \n                   data = ________)\nmpg_pred  <- ________ |> \n  predict(new_data = ________) |> \n  bind_cols(________)\nrmse(________, truth = ________, estimate = ________)\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer_1f8112b8\" data-update-every=\"1\" tabindex=\"0\" style=\"right:0;bottom:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">06</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n\n:::\n\n## A faster way! {.small}\n\n* You can use `last_fit()` and specify the split\n* This will automatically train the data on the `train` data from the split\n* Instead of specifying which metric to calculate (with `rmse` as before) you can just use `collect_metrics()` and it will automatically calculate the metrics on the `test` data from the split\n\n## A faster way! {.small}\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nset.seed(100)\n\nAuto_split <- initial_split(Auto, prop = 0.5)\nlm_fit <- last_fit(lm_spec,\n                   mpg ~ horsepower,\n                   split = Auto_split) \n\nlm_fit |>\n  collect_metrics()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 4\n  .metric .estimator .estimate .config             \n  <chr>   <chr>          <dbl> <chr>               \n1 rmse    standard       4.96  Preprocessor1_Model1\n2 rsq     standard       0.613 Preprocessor1_Model1\n```\n\n\n:::\n:::\n\n\n## A faster way! {.small}\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"6|9\"}\nset.seed(100)\n\nAuto_split <- initial_split(Auto, prop = 0.5)\nlm_fit <- last_fit(lm_spec,\n                   mpg ~ horsepower,\n                   split = Auto_split) \n\nlm_fit |>\n  collect_metrics()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 4\n  .metric .estimator .estimate .config             \n  <chr>   <chr>          <dbl> <chr>               \n1 rmse    standard       4.96  Preprocessor1_Model1\n2 rsq     standard       0.613 Preprocessor1_Model1\n```\n\n\n:::\n:::\n\n\n\n\n## What about cross validation?\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nAuto_cv <- vfold_cv(Auto, v = 5)\nAuto_cv\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n#  5-fold cross-validation \n# A tibble: 5 × 2\n  splits           id   \n  <list>           <chr>\n1 <split [313/79]> Fold1\n2 <split [313/79]> Fold2\n3 <split [314/78]> Fold3\n4 <split [314/78]> Fold4\n5 <split [314/78]> Fold5\n```\n\n\n:::\n:::\n\n\n\n## What about cross validation?\n\n* Instead of `fit` we will use `fit_resamples` \n\n. . .\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code  code-line-numbers=\"1|2|3\"}\nfit_resamples(lm_spec, \n              mpg ~ horsepower,\n              resamples = Auto_cv) \n```\n:::\n\n\n\n\n\n## What about cross validation?\n\n::: question\nHow do we get the metrics out? With `collect_metrics()` again!\n:::\n\n. . .\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nresults <- fit_resamples(lm_spec,\n                         mpg ~ horsepower,\n                         resamples = Auto_cv)\n\nresults |>\n  collect_metrics()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 6\n  .metric .estimator  mean     n std_err .config             \n  <chr>   <chr>      <dbl> <int>   <dbl> <chr>               \n1 rmse    standard   4.88      5  0.385  Preprocessor1_Model1\n2 rsq     standard   0.616     5  0.0220 Preprocessor1_Model1\n```\n\n\n:::\n:::\n\n\n\n## `<svg aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 640 512\" style=\"height:1em;width:1.25em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:currentColor;overflow:visible;position:relative;\"><path d=\"M128 32C92.7 32 64 60.7 64 96V352h64V96H512V352h64V96c0-35.3-28.7-64-64-64H128zM19.2 384C8.6 384 0 392.6 0 403.2C0 445.6 34.4 480 76.8 480H563.2c42.4 0 76.8-34.4 76.8-76.8c0-10.6-8.6-19.2-19.2-19.2H19.2z\"/></svg>`{=html} `Application Exercise`  {.small}\n\n::: nonincremental\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer_f8ee56ec\" data-update-every=\"1\" tabindex=\"0\" style=\"right:0;bottom:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">05</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n\n1. Edit the code below to get the 5-fold cross validation error rate for the following model:\n\n$mpg = \\beta_0 + \\beta_1 horsepower + \\beta_2 horsepower^2+ \\epsilon$\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nAuto_cv <- vfold_cv(Auto, v = 5)\n\nresults <- fit_resamples(lm_spec,\n                         ----,\n                         resamples = ---)\n\nresults |>\n  collect_metrics()\n```\n:::\n\n\n* What do you think `rsq` is?\n\n:::\n\n## Answer\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nAuto_cv <- vfold_cv(Auto, v = 5)\n\nresults <- fit_resamples(lm_spec,\n                         mpg ~ horsepower + I(horsepower^2),\n                         resamples = Auto_cv)\n\nresults |>\n  collect_metrics()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 6\n  .metric .estimator  mean     n std_err .config             \n  <chr>   <chr>      <dbl> <int>   <dbl> <chr>               \n1 rmse    standard   4.38      5  0.110  Preprocessor1_Model1\n2 rsq     standard   0.688     5  0.0177 Preprocessor1_Model1\n```\n\n\n:::\n:::\n\n\n## `<svg aria-hidden=\"true\" role=\"img\" viewBox=\"0 0 640 512\" style=\"height:1em;width:1.25em;vertical-align:-0.125em;margin-left:auto;margin-right:auto;font-size:inherit;fill:currentColor;overflow:visible;position:relative;\"><path d=\"M128 32C92.7 32 64 60.7 64 96V352h64V96H512V352h64V96c0-35.3-28.7-64-64-64H128zM19.2 384C8.6 384 0 392.6 0 403.2C0 445.6 34.4 480 76.8 480H563.2c42.4 0 76.8-34.4 76.8-76.8c0-10.6-8.6-19.2-19.2-19.2H19.2z\"/></svg>`{=html} `Application Exercise`  {.small}\n\n::: nonincremental\n1. Fit 3 models on the data using 5 fold cross validation:\n\n   ::: smaller\n     $mpg = \\beta_0 + \\beta_1 horsepower + \\epsilon$ \n     \n     $mpg = \\beta_0 + \\beta_1 horsepower + \\beta_2 horsepower^2+ \\epsilon$\n     \n     $mpg = \\beta_0 + \\beta_1 horsepower + \\beta_2 horsepower^2+ \\beta_3 horsepower^3 +\\epsilon$\n   :::\n\n2. Collect the metrics from each model, saving the results as `results_1`, `results_2`, `results_3`\n\n3. Which model is \"best\"?\n\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer_b7a3bc09\" data-update-every=\"1\" tabindex=\"0\" style=\"right:0;bottom:0;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">08</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../site_libs/countdown-0.4.0/countdown.css\" rel=\"stylesheet\" />\n<script src=\"../site_libs/countdown-0.4.0/countdown.js\"></script>\n"
      ],
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}